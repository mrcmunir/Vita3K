name: Vita3K Optimized CI

on: [push, pull_request]

jobs:
  format-check:
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Format check
        run: .github/format-check.sh

  build:
    needs: [format-check]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04-arm]
        config: [Release]
        version: [zip, appimage]
        memory_mapping: [ON, OFF]
        include:
          - os: ubuntu-22.04-arm
            version: zip
            memory_mapping: ON
            cache_path: ~/.ccache
            extra_cmake_args: -DMEMORY_MAPPING=ON -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18
            cmake_preset: linux-ninja-clang
          - os: ubuntu-22.04-arm
            version: zip
            memory_mapping: OFF
            cache_path: ~/.ccache
            extra_cmake_args: -DMEMORY_MAPPING=OFF -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18
            cmake_preset: linux-ninja-clang
          - os: ubuntu-22.04-arm
            version: appimage
            memory_mapping: ON
            cache_path: ~/.ccache
            extra_cmake_args: -DMEMORY_MAPPING=ON -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 -DLINUXDEPLOY_COMMAND=/usr/local/bin/linuxdeploy-aarch64.AppImage
            cmake_preset: linux-ninja-clang-appimage
          - os: ubuntu-22.04-arm
            version: appimage
            memory_mapping: OFF
            cache_path: ~/.ccache
            extra_cmake_args: -DMEMORY_MAPPING=OFF -DCMAKE_C_COMPILER=clang-18 -DCMAKE_CXX_COMPILER=clang++-18 -DLINUXDEPLOY_COMMAND=/usr/local/bin/linuxdeploy-aarch64.AppImage
            cmake_preset: linux-ninja-clang-appimage

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up build environment
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh 18
          export CXX=clang++-18
          export CC=clang-18

          sudo add-apt-repository -y ppa:mhier/libboost-latest
          sudo add-apt-repository universe
          sudo apt update
          sudo apt -y install ccache libboost-filesystem1.83-dev libboost-program-options1.83-dev libboost-system1.83-dev libgtk-3-dev libsdl2-dev ninja-build libfuse2 zip

      - uses: actions/cache@v4
        with:
          path: ${{ matrix.cache_path }}
          key: cache-${{ matrix.os }}-${{ matrix.config }}-${{ github.sha }}
          restore-keys: |
            cache-${{ matrix.os }}-${{ matrix.config }}-

      - name: Set up SDL 2.30.9
        run: |
          SDL2VER=2.30.9
          mkdir -p ~/.ccache
          cd ~/.ccache
          if [[ ! -e SDL2-${SDL2VER} ]]; then
            curl -sLO https://libsdl.org/release/SDL2-${SDL2VER}.tar.gz
            tar -xzf SDL2-${SDL2VER}.tar.gz
            cd SDL2-${SDL2VER}
            ./configure --prefix=/usr/local
            make && cd ../
            rm SDL2-${SDL2VER}.tar.gz
          fi
          sudo make -C SDL2-${SDL2VER} install

      - name: Set up linuxdeploy
        run: |
          if [[ ! -e linuxdeploy-aarch64.AppImage ]]; then
            curl -sLO https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-aarch64.AppImage
          fi
          sudo cp -f linuxdeploy-aarch64.AppImage /usr/local/bin/
          sudo chmod +x /usr/local/bin/linuxdeploy-aarch64.AppImage
        if: matrix.version == 'appimage'

      - name: Ccache setup
        run: ccache -z

      - name: CMake
        run: |
          cmake ${{ matrix.extra_cmake_args }} --preset ${{ matrix.cmake_preset }}
          cmake --build build/${{ matrix.cmake_preset }} --config ${{ matrix.config }}

      - name: CTest
        working-directory: build/${{ matrix.cmake_preset }}
        run: ctest --build-config ${{ matrix.config }} --output-on-failure

      - name: Compute git short sha
        shell: bash
        run: echo "git_short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set Build Variable
        shell: bash
        run: echo "build_variable=$(git rev-list HEAD --count)" >> $GITHUB_ENV

      - name: Set Memory Mapping Name
        run: |
          if [[ ${{ matrix.memory_mapping }} == 'ON' ]]; then
            echo "MEMORY_MAPPING_NAME=memory-mapping-enabled" >> $GITHUB_ENV
          else
            echo "MEMORY_MAPPING_NAME=memory-mapping-disabled" >> $GITHUB_ENV
          fi

      - name: Bundle Shared Objects
        id: bundle_shared_objects
        run: |
          cd build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}
          cp /usr/lib/aarch64-linux-gnu/libssl.so.3 ./libssl.so.3
          cp /usr/lib/aarch64-linux-gnu/libcrypto.so.3 ./libcrypto.so.3

      - name: Ccache statistics
        run: ccache -s

      - name: Clean appimage build
        run: |
          cd build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}
          cp -f *AppImage* ../
          rm -rf ./*
          cp -f ../*AppImage* ./
          rm -f ../*AppImage*
        if: matrix.version == 'appimage'

      - name: Create ZIP (for zip builds)
        if: matrix.version == 'zip'
        run: |
          cd build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}
          zip -r vita3k-${{ env.git_short_sha }}-${{ env.MEMORY_MAPPING_NAME }}-${{ matrix.os }}.zip .

      - uses: actions/upload-artifact@v4
        with:
          name: vita3k-${{ env.git_short_sha }}-${{ matrix.version }}-${{ env.MEMORY_MAPPING_NAME }}-${{ matrix.os }}
          path: |
            build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}/*.AppImage*
            build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}/*.zip

    outputs:
      BuildTag: ${{ env.build_variable }}
      ShortSHA: ${{ env.git_short_sha }}
      MEMORY_MAPPING_NAME: ${{ env.MEMORY_MAPPING_NAME }}

  create-release:
    needs: [build]
    strategy:
      matrix:
        memory_mapping: [ON, OFF]
    runs-on: ubuntu-22.04-arm
    concurrency:
      group: create-release
      cancel-in-progress: false
    if: |
      github.ref == 'refs/heads/master' &&
      github.repository == 'mrcmunir/Vita3K'
    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts
          pattern: vita3k-*-${{ matrix.memory_mapping == 'ON' && 'memory-mapping-enabled' || 'memory-mapping-disabled' }}-*

      - name: Debug downloaded artifacts structure
        run: |
          echo "Estructura de downloaded_artifacts:"
          tree downloaded_artifacts

      - name: Upload
        shell: bash
        run: |
          echo "Valor de MEMORY_MAPPING_NAME: $MEMORY_MAPPING_NAME"
          suffix="${MEMORY_MAPPING_NAME#memory-mapping-}"
          echo "Sufijo extraído: $suffix"

          # Mover archivos a la carpeta artifacts
          mkdir -p artifacts
          find downloaded_artifacts -type f \( \
            -iname "*.AppImage" -o \
            -iname "*.AppImage.zsync" -o \
            -iname "*.zip" \
          \) -exec cp {} artifacts/ \;

          # Renombrar archivos AppImage y ZIP según el sufijo
          for file in artifacts/*; do
            if [[ "$file" == *"memory-mapping-enabled"* ]]; then
              new_name="${file//memory-mapping-enabled/$suffix}"
              mv "$file" "$new_name"
            elif [[ "$file" == *"memory-mapping-disabled"* ]]; then
              new_name="${file//memory-mapping-disabled/$suffix}"
              mv "$file" "$new_name"
            fi
          done

          echo "Contenido de artifacts/:"
          ls -al artifacts/

          # Subir release usando ghr
          wget -c https://github.com/tcnksm/ghr/releases/download/v0.17.0/ghr_v0.17.0_linux_arm64.tar.gz
          tar xfv ghr_v0.17.0_linux_arm64.tar.gz
          ghr_v0.17.0_linux_arm64/ghr -u mrcmunir -r Vita3K -n 'Automatic CI builds' -b "$(printf "Corresponding commit: ${{ github.sha }}\nVita3K Build: ${{ needs.build.outputs.BuildTag }}")" "build-${{ env.git_short_sha }}" artifacts/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MEMORY_MAPPING_NAME: ${{ matrix.memory_mapping == 'ON' && 'memory-mapping-enabled' || 'memory-mapping-disabled' }}

      - name: Delete old releases
        shell: bash
        run: |
          releases=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | .id')
          releases=($releases)
          if [[ ${#releases[@]} -gt 10 ]]; then
            for ((i=0; i<${#releases[@]}-10; i++)); do
              release_id=${releases[$i]}
              echo "Eliminando release con ID: $release_id"
              curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            done
          else
            echo "No hay releases antiguos para eliminar."
          fi
