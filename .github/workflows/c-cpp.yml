name: C/C++ CI

on: [push, pull_request]

jobs:
  format-check:
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Format check
        run: .github/format-check.sh

  build:
    needs: [format-check]
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04-arm]
        config: [Release]
        version: [zip, appimage]
        memory_mapping: [ON, OFF]
        include:
          - os: ubuntu-22.04-arm
            version: zip
            memory_mapping: ON
            cache_path: ~/.ccache
            extra_cmake_args: -DMEMORY_MAPPING=ON
            cmake_preset: linux-ninja-clang
          - os: ubuntu-22.04-arm
            version: zip
            memory_mapping: OFF
            cache_path: ~/.ccache
            extra_cmake_args: -DMEMORY_MAPPING=OFF
            cmake_preset: linux-ninja-clang
          - os: ubuntu-22.04-arm
            version: appimage
            memory_mapping: ON
            cache_path: ~/.ccache
            extra_cmake_args: -DMEMORY_MAPPING=ON -DLINUXDEPLOY_COMMAND=/usr/local/bin/linuxdeploy-aarch64.AppImage
            cmake_preset: linux-ninja-clang-appimage
          - os: ubuntu-22.04-arm
            version: appimage
            memory_mapping: OFF
            cache_path: ~/.ccache
            extra_cmake_args: -DMEMORY_MAPPING=OFF -DLINUXDEPLOY_COMMAND=/usr/local/bin/linuxdeploy-aarch64.AppImage
            cmake_preset: linux-ninja-clang-appimage

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up build environment
        run: |
          sudo add-apt-repository -y ppa:mhier/libboost-latest
          sudo add-apt-repository universe
          sudo apt update
          sudo apt -y install ccache libboost-filesystem1.83-dev libboost-program-options1.83-dev libboost-system1.83-dev libgtk-3-dev libsdl2-dev ninja-build libfuse2
        if: matrix.os == 'ubuntu-22.04-arm'

      - uses: actions/cache@v4
        with:
          path: ${{ matrix.cache_path }}
          key: cache-${{ matrix.os }}-${{ matrix.config }}-${{ github.sha }}
          restore-keys: |
            cache-${{ matrix.os }}-${{ matrix.config }}-
      - name: Set up SDL 2.30.9
        run: |
          SDL2VER=2.30.9
          if [[ ! -e ~/.ccache ]]; then
            mkdir ~/.ccache
          fi  
          cd ~/.ccache
          if [[ ! -e SDL2-${SDL2VER} ]]; then
            curl -sLO https://libsdl.org/release/SDL2-${SDL2VER}.tar.gz
            tar -xzf SDL2-${SDL2VER}.tar.gz
            cd SDL2-${SDL2VER}
            ./configure --prefix=/usr/local
            make && cd ../
            rm SDL2-${SDL2VER}.tar.gz
          fi
          sudo make -C SDL2-${SDL2VER} install
        if: matrix.os == 'ubuntu-22.04-arm'

      - name: Set up linuxdeploy
        run: |
          if [[ ! -e linuxdeploy-aarch64.AppImage ]]; then
            curl -sLO https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-aarch64.AppImage
          fi
          sudo cp -f linuxdeploy-aarch64.AppImage /usr/local/bin/
          sudo chmod +x /usr/local/bin/linuxdeploy-aarch64.AppImage
        if: matrix.version == 'appimage'

      - name: Ccache setup
        run: ccache -z

      - name: CMake
        run: |
          cmake ${{ matrix.extra_cmake_args }} --preset ${{ matrix.cmake_preset }}
          cmake --build build/${{ matrix.cmake_preset }} --config ${{ matrix.config }}
      - name: CTest
        working-directory: build/${{ matrix.cmake_preset }}
        run: ctest --build-config ${{ matrix.config }} --output-on-failure

      - name: Compute git short sha
        shell: bash
        run: echo "git_short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set Build Variable
        shell: bash
        run: echo "build_variable=$(git rev-list HEAD --count)" >> $GITHUB_ENV
        if: matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-22.04-arm'

      - name: Set Memory Mapping Name
        run: |
          if [[ ${{ matrix.memory_mapping }} == 'ON' ]]; then
            echo "MEMORY_MAPPING_NAME=memory-mapping-enabled" >> $GITHUB_ENV
          else
            echo "MEMORY_MAPPING_NAME=memory-mapping-disabled" >> $GITHUB_ENV
          fi
      - name: Bundle Shared Objects
        id: bundle_shared_objects
        run: |
            cd build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}
            cp /usr/lib/aarch64-linux-gnu/libssl.so.3 ./libssl.so.3
            cp /usr/lib/aarch64-linux-gnu/libcrypto.so.3 ./libcrypto.so.3
        if: matrix.os == 'ubuntu-22.04-arm'

      - name: Ccache statistics
        run: ccache -s

      - name: Clean appimage build
        run: |
          cd build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}
          cp -f *AppImage* ../
          rm -rf ./*
          cp -f ../*AppImage* ./
          rm -f ../*AppImage*
        if: matrix.version == 'appimage'

      - uses: actions/upload-artifact@v4
        with:
          name: vita3k-${{ env.git_short_sha }}-${{ matrix.version }}-${{ env.MEMORY_MAPPING_NAME }}-${{ matrix.os }}
          path: build/${{ matrix.cmake_preset }}/bin/${{ matrix.config }}

    outputs:
      BuildTag: ${{ env.build_variable }}
      ShortSHA: ${{ env.git_short_sha }}

  create-release:
    needs: [build]
    strategy:
      fail-fast: false
      matrix:
        repo: [master]
    runs-on: ubuntu-22.04-arm
    concurrency:
      group: create-release
      cancel-in-progress: false
    if: |
      github.ref == 'refs/heads/master' &&
      github.repository == 'mrcmunir/Vita3K'
    steps:
      - uses: actions/checkout@v4

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts
      - name: List downloaded artifacts
        run: |
          echo "Contenido de downloaded_artifacts:"
          find downloaded_artifacts -type f

      - name: Upload
        shell: bash
        run: |
          mkdir -p artifacts/
          echo "Archivos encontrados:"
          find downloaded_artifacts -type f \( \
          -iname "Vita3K-aarch64.AppImage" -o \
          -iname "Vita3K-aarch64.AppImage.zsync" -o \
          -iname "Vita3K.zip" \
          \) | while read -r file; do
          echo "Procesando archivo: $file"
          dir_name=$(basename "$(dirname "$file")")
          echo "Nombre del directorio: $dir_name"
      
  
           if [[ "$file" =~ [aA][pP][pP][iI][mM][aA][gG][eE] ]]; then
              if [[ "$dir_name" =~ [mM][eE][mM][oO][rR][yY]-[mM][aA][pP][pP][iI][nN][gG]-[dD][iI][sS][aA][bB][lL][eE][dD] ]]; then
                cp "$file" "artifacts/AppImage-memory-mapping-disabled.AppImage"
              elif [[ "$dir_name" =~ [mM][eE][mM][oO][rR][yY]-[mM][aA][pP][pP][iI][nN][gG]-[eE][nN][aA][bB][lL][eE][dD] ]]; then
                cp "$file" "artifacts/AppImage-memory-mapping-enabled.AppImage"
              fi
          elif [[ "$file" =~ [zZ][sS][yY][nN][cC] ]]; then
              if [[ "$dir_name" =~ [mM][eE][mM][oO][rR][yY]-[mM][aA][pP][pP][iI][nN][gG]-[dD][iI][sS][aA][bB][lL][eE][dD] ]]; then
                cp "$file" "artifacts/AppImage-memory-mapping-disabled.AppImage.zsync"
          elif [[ "$dir_name" =~ [mM][eE][mM][oO][rR][yY]-[mM][aA][pP][pP][iI][nN][gG]-[eE][nN][aA][bB][lL][eE][dD] ]]; then
                cp "$file" "artifacts/AppImage-memory-mapping-enabled.AppImage.zsync"
              fi
          elif [[ "$file" =~ [zZ][iI][pP] ]]; then
              if [[ "$dir_name" =~ [mM][eE][mM][oO][rR][yY]-[mM][aA][pP][pP][iI][nN][gG]-[dD][iI][sS][aA][bB][lL][eE][dD] ]]; then
                cp "$file" "artifacts/memory-mapping-disabled.zip"
              elif [[ "$dir_name" =~ [mM][eE][mM][oO][rR][yY]-[mM][aA][pP][pP][iI][nN][gG]-[eE][nN][aA][bB][lL][eE][dD] ]]; then
                cp "$file" "artifacts/memory-mapping-enabled.zip"
              fi
            fi
          done
          echo "Contenido de artifacts/:"
          ls -al artifacts/
          
            wget -c https://github.com/tcnksm/ghr/releases/download/v0.17.0/ghr_v0.17.0_linux_arm64.tar.gz
            tar xfv ghr_v0.17.0_linux_arm64.tar.gz
            ghr_v0.17.0_linux_arm64/ghr -u mrcmunir -r Vita3K -recreate -n 'Automatic CI builds' -b "$(printf "Corresponding commit: ${{ github.sha }}\nVita3K Build: ${{ env.Build_Variable }}")" continuous artifacts/
        if: matrix.repo == 'master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
